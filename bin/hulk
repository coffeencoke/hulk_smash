#!/usr/bin/env ruby
require 'gli'
require 'hulk'

include GLI::App

program_desc 'Hulking is the act of testing the scalability of your app'

version Hulk.version

config_file '.hulkrc'

desc "Hulk while ssh'd into the server"
switch :local

desc 'Prints the results from siege'
switch [:v, :verbose]

desc 'The url to hit with the hulk'
default_value 'http://localhost'
arg_name 'http://localhost'
flag :url

desc 'Duration to run the test'
default_value '1m'
arg_name '1m'
flag :duration

desc 'User to use to ssh into the server'
default_value 'the user you are currently logged in as'
arg_name 'yoda'
flag :ssh_user

desc 'The number of requests to send concurrently'
default_value '15'
arg_name '15'
flag :concurrent_users

desc 'The rate of requests per minute to assert'
default_value '500000'
arg_name '500000'
flag :assert_rpm

def run_command(cmd, local=false)
  if local
    puts "running..."
    raise "Unimplemented! Need to run this command locally on the server"
    puts `#{cmd}`
  else
    puts "running..."
    puts cmd
    puts `#{cmd}`
  end
end

command :load_test do |c|
  c.action do |global_options, options, args|
    command_to_run = "siege -b -c #{global_options[:concurrent_users]} -t #{global_options[:duration]} #{global_options[:url]}"
    run_command command_to_run, global_options[:local]
  end
end

command :scale_test do |c|
  c.action do |global_options, options, args|
    command_to_run = "siege -c #{global_options[:concurrent_users]} -t #{global_options[:duration]} #{global_options[:url]}"
    puts "running..."
    puts command_to_run
    puts `#{command_to_run}`
  end
end

exit run(ARGV)
